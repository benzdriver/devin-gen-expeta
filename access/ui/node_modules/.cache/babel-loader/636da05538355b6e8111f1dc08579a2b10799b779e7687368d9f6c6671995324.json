{"ast":null,"code":"/**\n * @file api.js\n * @description API服务，处理HTTP请求\n * \n * 需求:\n * 1. 更新现有API服务，支持新的会话和生成功能\n * 2. 保留认证相关功能\n * 3. 增加会话管理和消息发送API\n * 4. 支持代码生成和存储相关API\n * \n * 主要服务:\n * - authService: 认证相关API\n * - conversationService: 会话管理API\n * - expectationService: 期望管理API\n * - generationService: 代码生成API\n */import axios from'axios';// 导入其他必要依赖\nconst API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:8000';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// 请求拦截器 - 添加认证信息\napi.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// 响应拦截器 - 处理错误\napi.interceptors.response.use(response=>{return response;},error=>{// 处理401未授权错误\nif(error.response&&error.response.status===401){localStorage.removeItem('authToken');// 如果有路由，可以重定向到登录页\nwindow.location.href='/login';}return Promise.reject(error);});// 处理用户认证相关的API\nexport const authService={// 用户登录\nlogin:credentials=>{return api.post('/api/auth/login',credentials);},// 用户注册\nregister:userData=>{return api.post('/api/auth/register',userData);},// 获取当前用户信息\ngetCurrentUser:()=>{return api.get('/api/auth/me');},// 退出登录\nlogout:()=>{localStorage.removeItem('authToken');localStorage.removeItem('mockUser');return Promise.resolve();}};// 处理会话相关的API\nexport const conversationService={// 创建新会话\ncreateConversation:()=>{return api.post('/api/conversations');},// 获取会话\ngetConversation:id=>{return api.get(`/api/conversations/${id}`);},// 发送消息\nsendMessage:(conversationId,content)=>{return api.post(`/api/conversations/${conversationId}/messages`,{content});},// 确认期望\nconfirmExpectation:(conversationId,expectationId)=>{return api.post(`/api/conversations/${conversationId}/confirm`,{expectationId});},// 生成代码\ngenerateCode:(conversationId,expectationId)=>{return api.post(`/api/conversations/${conversationId}/generate`,{expectationId});},// 获取会话列表\ngetConversations:()=>{return api.get('/api/conversations');}};// 处理期望相关的API\nexport const expectationService={// 获取所有期望\ngetExpectations:()=>{return api.get('/api/expectations');},// 获取单个期望详情\ngetExpectation:id=>{return api.get(`/api/expectations/${id}`);},// 创建新期望\ncreateExpectation:data=>{return api.post('/api/expectations',data);},// 更新期望\nupdateExpectation:(id,data)=>{return api.put(`/api/expectations/${id}`,data);},// 删除期望\ndeleteExpectation:id=>{return api.delete(`/api/expectations/${id}`);}};// 处理代码生成相关的API\nexport const generationService={// 获取生成结果\ngetGeneration:id=>{return api.get(`/api/generations/${id}`);},// 获取生成历史\ngetGenerations:()=>{return api.get('/api/generations');},// 下载生成的代码\ndownloadGeneration:id=>{return api.get(`/api/generations/${id}/download`,{responseType:'blob'});}};// 处理系统统计相关的API\nexport const systemService={// 获取系统统计数据\ngetSystemStats:()=>{return api.get('/api/system/stats');},// 获取系统健康状态\ngetSystemHealth:()=>{return api.get('/api/system/health');}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authService","login","credentials","post","register","userData","getCurrentUser","get","logout","resolve","conversationService","createConversation","getConversation","id","sendMessage","conversationId","content","confirmExpectation","expectationId","generateCode","getConversations","expectationService","getExpectations","getExpectation","createExpectation","data","updateExpectation","put","deleteExpectation","delete","generationService","getGeneration","getGenerations","downloadGeneration","responseType","systemService","getSystemStats","getSystemHealth"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/services/api.js"],"sourcesContent":["/**\n * @file api.js\n * @description API服务，处理HTTP请求\n * \n * 需求:\n * 1. 更新现有API服务，支持新的会话和生成功能\n * 2. 保留认证相关功能\n * 3. 增加会话管理和消息发送API\n * 4. 支持代码生成和存储相关API\n * \n * 主要服务:\n * - authService: 认证相关API\n * - conversationService: 会话管理API\n * - expectationService: 期望管理API\n * - generationService: 代码生成API\n */\n\nimport axios from 'axios';\n// 导入其他必要依赖\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 添加认证信息\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // 处理401未授权错误\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('authToken');\n      // 如果有路由，可以重定向到登录页\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 处理用户认证相关的API\nexport const authService = {\n  // 用户登录\n  login: (credentials) => {\n    return api.post('/api/auth/login', credentials);\n  },\n  \n  // 用户注册\n  register: (userData) => {\n    return api.post('/api/auth/register', userData);\n  },\n  \n  // 获取当前用户信息\n  getCurrentUser: () => {\n    return api.get('/api/auth/me');\n  },\n  \n  // 退出登录\n  logout: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('mockUser');\n    return Promise.resolve();\n  },\n};\n\n// 处理会话相关的API\nexport const conversationService = {\n  // 创建新会话\n  createConversation: () => {\n    return api.post('/api/conversations');\n  },\n  \n  // 获取会话\n  getConversation: (id) => {\n    return api.get(`/api/conversations/${id}`);\n  },\n  \n  // 发送消息\n  sendMessage: (conversationId, content) => {\n    return api.post(`/api/conversations/${conversationId}/messages`, { content });\n  },\n  \n  // 确认期望\n  confirmExpectation: (conversationId, expectationId) => {\n    return api.post(`/api/conversations/${conversationId}/confirm`, { expectationId });\n  },\n  \n  // 生成代码\n  generateCode: (conversationId, expectationId) => {\n    return api.post(`/api/conversations/${conversationId}/generate`, { expectationId });\n  },\n  \n  // 获取会话列表\n  getConversations: () => {\n    return api.get('/api/conversations');\n  },\n};\n\n// 处理期望相关的API\nexport const expectationService = {\n  // 获取所有期望\n  getExpectations: () => {\n    return api.get('/api/expectations');\n  },\n  \n  // 获取单个期望详情\n  getExpectation: (id) => {\n    return api.get(`/api/expectations/${id}`);\n  },\n  \n  // 创建新期望\n  createExpectation: (data) => {\n    return api.post('/api/expectations', data);\n  },\n  \n  // 更新期望\n  updateExpectation: (id, data) => {\n    return api.put(`/api/expectations/${id}`, data);\n  },\n  \n  // 删除期望\n  deleteExpectation: (id) => {\n    return api.delete(`/api/expectations/${id}`);\n  },\n};\n\n// 处理代码生成相关的API\nexport const generationService = {\n  // 获取生成结果\n  getGeneration: (id) => {\n    return api.get(`/api/generations/${id}`);\n  },\n  \n  // 获取生成历史\n  getGenerations: () => {\n    return api.get('/api/generations');\n  },\n  \n  // 下载生成的代码\n  downloadGeneration: (id) => {\n    return api.get(`/api/generations/${id}/download`, {\n      responseType: 'blob'\n    });\n  },\n};\n\n// 处理系统统计相关的API\nexport const systemService = {\n  // 获取系统统计数据\n  getSystemStats: () => {\n    return api.get('/api/system/stats');\n  },\n  \n  // 获取系统健康状态\n  getSystemHealth: () => {\n    return api.get('/api/system/health');\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}