{"ast":null,"code":"var _jsxFileName = \"/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { authService } from '../services/api';\n\n// 创建认证上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 认证Provider组件\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 加载时检查登录状态\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          try {\n            // 尝试从API获取用户信息\n            const response = await authService.getCurrentUser();\n            setCurrentUser(response.data);\n          } catch (apiErr) {\n            // 如果API调用失败，尝试从localStorage读取模拟用户\n            const mockUserStr = localStorage.getItem('mockUser');\n            if (mockUserStr) {\n              try {\n                const mockUser = JSON.parse(mockUserStr);\n                setCurrentUser(mockUser);\n              } catch (parseErr) {\n                // 解析失败，清除localStorage\n                localStorage.removeItem('authToken');\n                localStorage.removeItem('mockUser');\n              }\n            } else {\n              // 如果没有模拟用户数据，清除authToken\n              localStorage.removeItem('authToken');\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Failed to load user:', err);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('mockUser');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  // 登录\n  const login = async credentials => {\n    setError(null);\n    try {\n      const response = await authService.login(credentials);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // 保存认证令牌和用户信息\n      localStorage.setItem('authToken', token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed');\n      throw err;\n    }\n  };\n\n  // 注册\n  const register = async userData => {\n    setError(null);\n    try {\n      const response = await authService.register(userData);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // 保存认证令牌和用户信息\n      localStorage.setItem('authToken', token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed');\n      throw err;\n    }\n  };\n\n  // 退出登录\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } finally {\n      // 无论API调用是否成功，都清除本地数据\n      localStorage.removeItem('authToken');\n      setCurrentUser(null);\n    }\n  };\n\n  // 提供的上下文值\n  const value = {\n    currentUser,\n    setCurrentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n\n// 自定义hook，方便获取认证上下文\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","loadUser","token","localStorage","getItem","response","getCurrentUser","data","apiErr","mockUserStr","mockUser","JSON","parse","parseErr","removeItem","err","console","login","credentials","user","setItem","_err$response","_err$response$data","message","register","userData","_err$response2","_err$response2$data","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { authService } from '../services/api';\n\n// 创建认证上下文\nconst AuthContext = createContext();\n\n// 认证Provider组件\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 加载时检查登录状态\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          try {\n            // 尝试从API获取用户信息\n            const response = await authService.getCurrentUser();\n            setCurrentUser(response.data);\n          } catch (apiErr) {\n            // 如果API调用失败，尝试从localStorage读取模拟用户\n            const mockUserStr = localStorage.getItem('mockUser');\n            if (mockUserStr) {\n              try {\n                const mockUser = JSON.parse(mockUserStr);\n                setCurrentUser(mockUser);\n              } catch (parseErr) {\n                // 解析失败，清除localStorage\n                localStorage.removeItem('authToken');\n                localStorage.removeItem('mockUser');\n              }\n            } else {\n              // 如果没有模拟用户数据，清除authToken\n              localStorage.removeItem('authToken');\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Failed to load user:', err);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('mockUser');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  // 登录\n  const login = async (credentials) => {\n    setError(null);\n    try {\n      const response = await authService.login(credentials);\n      const { token, user } = response.data;\n      \n      // 保存认证令牌和用户信息\n      localStorage.setItem('authToken', token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Login failed');\n      throw err;\n    }\n  };\n\n  // 注册\n  const register = async (userData) => {\n    setError(null);\n    try {\n      const response = await authService.register(userData);\n      const { token, user } = response.data;\n      \n      // 保存认证令牌和用户信息\n      localStorage.setItem('authToken', token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Registration failed');\n      throw err;\n    }\n  };\n\n  // 退出登录\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } finally {\n      // 无论API调用是否成功，都清除本地数据\n      localStorage.removeItem('authToken');\n      setCurrentUser(null);\n    }\n  };\n\n  // 提供的上下文值\n  const value = {\n    currentUser,\n    setCurrentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// 自定义hook，方便获取认证上下文\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}