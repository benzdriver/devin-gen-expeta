{"ast":null,"code":"var _jsxFileName = \"/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/context/ExpetaContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\n * @file ExpetaContext.js\n * @description Expeta功能上下文，管理全局状态和操作\n * \n * 需求:\n * 1. 简化现有ExpetaContext，专注于全局状态\n * 2. 提供对期望和生成结果的访问\n * 3. 管理系统级操作和状态\n * 4. 与ConversationContext协作\n * \n * 提供的上下文值:\n * - expectations: 已确认的期望列表\n * - generations: 代码生成结果列表\n * - generateCode: 从期望生成代码的函数\n * - loadExpectations: 加载期望的函数\n * - loadGenerations: 加载生成结果的函数\n */\n\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { expectationService, generationService } from '../services/api';\n// 导入其他必要依赖\n\n// Devin: 请在此实现ExpetaContext\n\n// 创建上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpetaContext = /*#__PURE__*/createContext();\n\n// 上下文Provider组件\nexport const ExpetaProvider = ({\n  children\n}) => {\n  _s();\n  // 基础状态\n  const [expectations, setExpectations] = useState([]);\n  const [generations, setGenerations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 加载期望列表\n  const loadExpectations = async () => {\n    try {\n      setLoading(true);\n      const response = await expectationService.getExpectations();\n      setExpectations(response.data);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '加载期望失败');\n      console.error('加载期望失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 加载生成历史\n  const loadGenerations = async () => {\n    try {\n      setLoading(true);\n      const response = await generationService.getGenerations();\n      setGenerations(response.data);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '加载生成历史失败');\n      console.error('加载生成历史失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 提供的上下文值\n  const value = {\n    expectations,\n    generations,\n    loading,\n    error,\n    loadExpectations,\n    loadGenerations\n  };\n  return /*#__PURE__*/_jsxDEV(ExpetaContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n};\n\n// 自定义hook\n_s(ExpetaProvider, \"rI6Hc45uWTXo60JpOCU3gbkOnbM=\");\n_c = ExpetaProvider;\nexport const useExpeta = () => {\n  _s2();\n  const context = useContext(ExpetaContext);\n  if (!context) {\n    throw new Error('useExpeta必须在ExpetaProvider内部使用');\n  }\n  return context;\n};\n_s2(useExpeta, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ExpetaContext;\nvar _c;\n$RefreshReg$(_c, \"ExpetaProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","expectationService","generationService","jsxDEV","_jsxDEV","ExpetaContext","ExpetaProvider","children","_s","expectations","setExpectations","generations","setGenerations","loading","setLoading","error","setError","loadExpectations","response","getExpectations","data","err","message","console","loadGenerations","getGenerations","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useExpeta","_s2","context","Error","$RefreshReg$"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/context/ExpetaContext.js"],"sourcesContent":["/**\n * @file ExpetaContext.js\n * @description Expeta功能上下文，管理全局状态和操作\n * \n * 需求:\n * 1. 简化现有ExpetaContext，专注于全局状态\n * 2. 提供对期望和生成结果的访问\n * 3. 管理系统级操作和状态\n * 4. 与ConversationContext协作\n * \n * 提供的上下文值:\n * - expectations: 已确认的期望列表\n * - generations: 代码生成结果列表\n * - generateCode: 从期望生成代码的函数\n * - loadExpectations: 加载期望的函数\n * - loadGenerations: 加载生成结果的函数\n */\n\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { expectationService, generationService } from '../services/api';\n// 导入其他必要依赖\n\n// Devin: 请在此实现ExpetaContext\n\n// 创建上下文\nconst ExpetaContext = createContext();\n\n// 上下文Provider组件\nexport const ExpetaProvider = ({ children }) => {\n  // 基础状态\n  const [expectations, setExpectations] = useState([]);\n  const [generations, setGenerations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 加载期望列表\n  const loadExpectations = async () => {\n    try {\n      setLoading(true);\n      const response = await expectationService.getExpectations();\n      setExpectations(response.data);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '加载期望失败');\n      console.error('加载期望失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 加载生成历史\n  const loadGenerations = async () => {\n    try {\n      setLoading(true);\n      const response = await generationService.getGenerations();\n      setGenerations(response.data);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '加载生成历史失败');\n      console.error('加载生成历史失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 提供的上下文值\n  const value = {\n    expectations,\n    generations,\n    loading,\n    error,\n    loadExpectations,\n    loadGenerations\n  };\n\n  return <ExpetaContext.Provider value={value}>{children}</ExpetaContext.Provider>;\n};\n\n// 自定义hook\nexport const useExpeta = () => {\n  const context = useContext(ExpetaContext);\n  if (!context) {\n    throw new Error('useExpeta必须在ExpetaProvider内部使用');\n  }\n  return context;\n};\n\nexport default ExpetaContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}