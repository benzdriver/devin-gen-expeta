{"ast":null,"code":"/**\n * @file ExpetaContext.js\n * @description Expeta功能上下文，管理全局状态和操作\n * \n * 需求:\n * 1. 简化现有ExpetaContext，专注于全局状态\n * 2. 提供对期望和生成结果的访问\n * 3. 管理系统级操作和状态\n * 4. 与ConversationContext协作\n * \n * 提供的上下文值:\n * - expectations: 已确认的期望列表\n * - generations: 代码生成结果列表\n * - generateCode: 从期望生成代码的函数\n * - loadExpectations: 加载期望的函数\n * - loadGenerations: 加载生成结果的函数\n */import React,{createContext,useState,useContext}from'react';import{expectationService,generationService,systemService}from'../services/api';// 导入其他必要依赖\n// Devin: 请在此实现ExpetaContext\n// 创建上下文\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ExpetaContext=/*#__PURE__*/createContext();// 上下文Provider组件\nexport const ExpetaProvider=_ref=>{let{children}=_ref;// 基础状态\nconst[expectations,setExpectations]=useState([]);const[generations,setGenerations]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// 初始化状态时提供默认值\nconst[systemStats,setSystemStats]=useState({expectations:{total:0,completed:0},generations:{total:0,completed:0},validations:{total:0,passed:0}});// 加载期望列表\nconst loadExpectations=async()=>{try{setLoading(true);const response=await expectationService.getExpectations();setExpectations(response.data);return response.data;}catch(err){setError(err.message||'加载期望失败');console.error('加载期望失败:',err);throw err;}finally{setLoading(false);}};// 加载生成历史\nconst loadGenerations=async()=>{try{setLoading(true);const response=await generationService.getGenerations();setGenerations(response.data);return response.data;}catch(err){setError(err.message||'加载生成历史失败');console.error('加载生成历史失败:',err);throw err;}finally{setLoading(false);}};// 加载系统统计数据\nconst loadSystemStats=async()=>{try{setLoading(true);const response=await systemService.getSystemStats();setSystemStats(response.data);return response;}catch(err){setError(err.message||'加载系统统计失败');console.error('加载系统统计失败:',err);throw err;}finally{setLoading(false);}};// 加载系统健康状态\nconst loadHealth=async()=>{try{setLoading(true);const response=await systemService.getSystemHealth();return response;}catch(err){setError(err.message||'加载系统健康状态失败');console.error('加载系统健康状态失败:',err);throw err;}finally{setLoading(false);}};// 提供的上下文值\nconst value={expectations,generations,loading,error,loadExpectations,loadGenerations,systemStats,loadSystemStats,loadHealth};return/*#__PURE__*/_jsx(ExpetaContext.Provider,{value:value,children:children});};// 自定义hook\nexport const useExpeta=()=>{const context=useContext(ExpetaContext);if(!context){throw new Error('useExpeta必须在ExpetaProvider内部使用');}return context;};export default ExpetaContext;","map":{"version":3,"names":["React","createContext","useState","useContext","expectationService","generationService","systemService","jsx","_jsx","ExpetaContext","ExpetaProvider","_ref","children","expectations","setExpectations","generations","setGenerations","loading","setLoading","error","setError","systemStats","setSystemStats","total","completed","validations","passed","loadExpectations","response","getExpectations","data","err","message","console","loadGenerations","getGenerations","loadSystemStats","getSystemStats","loadHealth","getSystemHealth","value","Provider","useExpeta","context","Error"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/context/ExpetaContext.js"],"sourcesContent":["/**\n * @file ExpetaContext.js\n * @description Expeta功能上下文，管理全局状态和操作\n * \n * 需求:\n * 1. 简化现有ExpetaContext，专注于全局状态\n * 2. 提供对期望和生成结果的访问\n * 3. 管理系统级操作和状态\n * 4. 与ConversationContext协作\n * \n * 提供的上下文值:\n * - expectations: 已确认的期望列表\n * - generations: 代码生成结果列表\n * - generateCode: 从期望生成代码的函数\n * - loadExpectations: 加载期望的函数\n * - loadGenerations: 加载生成结果的函数\n */\n\nimport React, { createContext, useState, useContext } from 'react';\nimport { expectationService, generationService, systemService } from '../services/api';\n// 导入其他必要依赖\n\n// Devin: 请在此实现ExpetaContext\n\n// 创建上下文\nconst ExpetaContext = createContext();\n\n// 上下文Provider组件\nexport const ExpetaProvider = ({ children }) => {\n  // 基础状态\n  const [expectations, setExpectations] = useState([]);\n  const [generations, setGenerations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 初始化状态时提供默认值\n  const [systemStats, setSystemStats] = useState({\n    expectations: { total: 0, completed: 0 },\n    generations: { total: 0, completed: 0 },\n    validations: { total: 0, passed: 0 }\n  });\n\n  // 加载期望列表\n  const loadExpectations = async () => {\n    try {\n      setLoading(true);\n      const response = await expectationService.getExpectations();\n      setExpectations(response.data);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '加载期望失败');\n      console.error('加载期望失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 加载生成历史\n  const loadGenerations = async () => {\n    try {\n      setLoading(true);\n      const response = await generationService.getGenerations();\n      setGenerations(response.data);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '加载生成历史失败');\n      console.error('加载生成历史失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 加载系统统计数据\n  const loadSystemStats = async () => {\n    try {\n      setLoading(true);\n      const response = await systemService.getSystemStats();\n      setSystemStats(response.data);\n      return response;\n    } catch (err) {\n      setError(err.message || '加载系统统计失败');\n      console.error('加载系统统计失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 加载系统健康状态\n  const loadHealth = async () => {\n    try {\n      setLoading(true);\n      const response = await systemService.getSystemHealth();\n      return response;\n    } catch (err) {\n      setError(err.message || '加载系统健康状态失败');\n      console.error('加载系统健康状态失败:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 提供的上下文值\n  const value = {\n    expectations,\n    generations,\n    loading,\n    error,\n    loadExpectations,\n    loadGenerations,\n    systemStats,\n    loadSystemStats,\n    loadHealth\n  };\n\n  return <ExpetaContext.Provider value={value}>{children}</ExpetaContext.Provider>;\n};\n\n// 自定义hook\nexport const useExpeta = () => {\n  const context = useContext(ExpetaContext);\n  if (!context) {\n    throw new Error('useExpeta必须在ExpetaProvider内部使用');\n  }\n  return context;\n};\n\nexport default ExpetaContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}