{"ast":null,"code":"/**\n * @file WebSocketService.js\n * @description WebSocket服务，处理实时通信\n * \n * 需求:\n * 1. 建立和维护WebSocket连接\n * 2. 处理消息发送和接收\n * 3. 实现断线重连和心跳检测\n * 4. 提供会话状态变化的通知\n * 5. 支持生成进度的实时更新\n * \n * 主要方法:\n * - connect(token): 建立连接\n * - disconnect(): 断开连接\n * - sendMessage(message): 发送消息\n * - subscribe(eventType, callback): 订阅事件\n * - unsubscribe(subscription): 取消订阅\n *//**\n * WebSocket服务类\n */class WebSocketService{constructor(baseUrl){this.baseUrl=baseUrl||'ws://localhost:8000/ws';this.connection=null;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectTimeout=null;this.pingInterval=null;this.subscriptions=new Map();this.eventListeners=new Map();this.connectionPromise=null;this.isConnecting=false;this.token=null;}/**\n   * 初始化连接\n   * @param {string} token 认证令牌\n   * @returns {Promise} 连接Promise\n   */connect(token){// 如果已连接或正在连接，返回现有Promise\nif(this.connection&&this.connection.readyState===WebSocket.OPEN){return Promise.resolve(this.connection);}if(this.isConnecting){return this.connectionPromise;}this.token=token;this.isConnecting=true;// 创建连接Promise\nthis.connectionPromise=new Promise((resolve,reject)=>{try{const url=`${this.baseUrl}?token=${token}`;this.connection=new WebSocket(url);this.connection.onopen=()=>{console.log('WebSocket连接已建立');this.reconnectAttempts=0;this.startPingInterval();this.isConnecting=false;resolve(this.connection);};this.connection.onclose=event=>{console.log(`WebSocket连接已关闭: ${event.code} ${event.reason}`);this.stopPingInterval();this.handleReconnect();// 触发关闭事件\nthis.dispatchEvent('close',event);};this.connection.onerror=error=>{console.error('WebSocket错误:',error);this.isConnecting=false;reject(error);// 触发错误事件\nthis.dispatchEvent('error',error);};this.connection.onmessage=event=>{this.handleMessage(event);};}catch(error){this.isConnecting=false;reject(error);}});return this.connectionPromise;}/**\n   * 断开连接\n   */disconnect(){if(this.connection){this.connection.close();this.connection=null;}this.stopPingInterval();this.clearReconnectTimeout();this.subscriptions.clear();this.isConnecting=false;this.connectionPromise=null;}/**\n   * 发送消息\n   * @param {Object} message 消息对象\n   * @returns {Promise} 发送Promise\n   */sendMessage(message){return this.ensureConnected().then(()=>{const messageString=typeof message==='string'?message:JSON.stringify(message);this.connection.send(messageString);return true;});}/**\n   * 确保已连接\n   * @returns {Promise} 连接Promise\n   */ensureConnected(){if(this.connection&&this.connection.readyState===WebSocket.OPEN){return Promise.resolve(this.connection);}return this.connect(this.token);}/**\n   * 处理接收到的消息\n   * @param {MessageEvent} event WebSocket消息事件\n   */handleMessage(event){try{const data=JSON.parse(event.data);// 处理不同类型的消息\nif(data.type==='ping'){// 响应ping消息\nthis.sendMessage({type:'pong'});return;}// 触发消息事件\nthis.dispatchEvent('message',data);// 处理特定类型的消息\nif(data.type){this.dispatchEvent(data.type,data);}// 通知订阅者\nif(data.subscriptionId&&this.subscriptions.has(data.subscriptionId)){const callback=this.subscriptions.get(data.subscriptionId);callback(data);}}catch(error){console.error('处理消息失败:',error);}}/**\n   * 处理重连\n   */handleReconnect(){if(this.reconnectAttempts>=this.maxReconnectAttempts){console.log('达到最大重连次数，停止重连');this.dispatchEvent('reconnectFailed');return;}this.reconnectAttempts++;const delay=Math.min(1000*Math.pow(2,this.reconnectAttempts),30000);console.log(`尝试重连 #${this.reconnectAttempts}，${delay}ms后...`);this.clearReconnectTimeout();this.reconnectTimeout=setTimeout(()=>{console.log(`开始第${this.reconnectAttempts}次重连尝试`);this.connect(this.token).catch(()=>{// 重连失败，将由onclose事件触发下一次重连\n});},delay);}/**\n   * 启动定时ping\n   */startPingInterval(){this.stopPingInterval();this.pingInterval=setInterval(()=>{if(this.connection&&this.connection.readyState===WebSocket.OPEN){this.sendMessage({type:'ping'}).catch(()=>{// 发送ping失败，可能连接已断开\nthis.connection.close();});}},30000);// 每30秒发送一次ping\n}/**\n   * 停止定时ping\n   */stopPingInterval(){if(this.pingInterval){clearInterval(this.pingInterval);this.pingInterval=null;}}/**\n   * 清除重连定时器\n   */clearReconnectTimeout(){if(this.reconnectTimeout){clearTimeout(this.reconnectTimeout);this.reconnectTimeout=null;}}/**\n   * 订阅特定事件\n   * @param {string} eventType 事件类型\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */addEventListener(eventType,callback){if(!this.eventListeners.has(eventType)){this.eventListeners.set(eventType,new Set());}const listeners=this.eventListeners.get(eventType);listeners.add(callback);return{remove:()=>{listeners.delete(callback);if(listeners.size===0){this.eventListeners.delete(eventType);}}};}/**\n   * 触发事件\n   * @param {string} eventType 事件类型\n   * @param {any} data 事件数据\n   */dispatchEvent(eventType,data){if(this.eventListeners.has(eventType)){const listeners=this.eventListeners.get(eventType);listeners.forEach(callback=>{try{callback(data);}catch(error){console.error(`事件处理器错误 (${eventType}):`,error);}});}}/**\n   * 订阅会话更新\n   * @param {string} conversationId 会话ID\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */subscribeToConversation(conversationId,callback){const subscriptionId=`conversation:${conversationId}`;return this.subscribe(subscriptionId,callback);}/**\n   * 订阅生成进度\n   * @param {string} generationId 生成ID\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */subscribeToGeneration(generationId,callback){const subscriptionId=`generation:${generationId}`;return this.subscribe(subscriptionId,callback);}/**\n   * 订阅事件\n   * @param {string} subscriptionId 订阅ID\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */subscribe(subscriptionId,callback){this.subscriptions.set(subscriptionId,callback);// 发送订阅消息\nthis.ensureConnected().then(()=>{this.sendMessage({type:'subscribe',subscriptionId});});return{subscriptionId,unsubscribe:()=>this.unsubscribe(subscriptionId)};}/**\n   * 取消订阅\n   * @param {string} subscriptionId 订阅ID\n   */unsubscribe(subscriptionId){if(this.subscriptions.has(subscriptionId)){this.subscriptions.delete(subscriptionId);// 发送取消订阅消息\nif(this.connection&&this.connection.readyState===WebSocket.OPEN){this.sendMessage({type:'unsubscribe',subscriptionId}).catch(()=>{// 忽略错误\n});}}}}// 创建全局单例\nconst webSocketService=new WebSocketService();export default webSocketService;","map":{"version":3,"names":["WebSocketService","constructor","baseUrl","connection","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","pingInterval","subscriptions","Map","eventListeners","connectionPromise","isConnecting","token","connect","readyState","WebSocket","OPEN","Promise","resolve","reject","url","onopen","console","log","startPingInterval","onclose","event","code","reason","stopPingInterval","handleReconnect","dispatchEvent","onerror","error","onmessage","handleMessage","disconnect","close","clearReconnectTimeout","clear","sendMessage","message","ensureConnected","then","messageString","JSON","stringify","send","data","parse","type","subscriptionId","has","callback","get","delay","Math","min","pow","setTimeout","catch","setInterval","clearInterval","clearTimeout","addEventListener","eventType","set","Set","listeners","add","remove","delete","size","forEach","subscribeToConversation","conversationId","subscribe","subscribeToGeneration","generationId","unsubscribe","webSocketService"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/services/WebSocketService.js"],"sourcesContent":["/**\n * @file WebSocketService.js\n * @description WebSocket服务，处理实时通信\n * \n * 需求:\n * 1. 建立和维护WebSocket连接\n * 2. 处理消息发送和接收\n * 3. 实现断线重连和心跳检测\n * 4. 提供会话状态变化的通知\n * 5. 支持生成进度的实时更新\n * \n * 主要方法:\n * - connect(token): 建立连接\n * - disconnect(): 断开连接\n * - sendMessage(message): 发送消息\n * - subscribe(eventType, callback): 订阅事件\n * - unsubscribe(subscription): 取消订阅\n */\n\n/**\n * WebSocket服务类\n */\nclass WebSocketService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl || 'ws://localhost:8000/ws';\n    this.connection = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.pingInterval = null;\n    this.subscriptions = new Map();\n    this.eventListeners = new Map();\n    this.connectionPromise = null;\n    this.isConnecting = false;\n    this.token = null;\n  }\n\n  /**\n   * 初始化连接\n   * @param {string} token 认证令牌\n   * @returns {Promise} 连接Promise\n   */\n  connect(token) {\n    // 如果已连接或正在连接，返回现有Promise\n    if (this.connection && this.connection.readyState === WebSocket.OPEN) {\n      return Promise.resolve(this.connection);\n    }\n    \n    if (this.isConnecting) {\n      return this.connectionPromise;\n    }\n    \n    this.token = token;\n    this.isConnecting = true;\n    \n    // 创建连接Promise\n    this.connectionPromise = new Promise((resolve, reject) => {\n      try {\n        const url = `${this.baseUrl}?token=${token}`;\n        this.connection = new WebSocket(url);\n        \n        this.connection.onopen = () => {\n          console.log('WebSocket连接已建立');\n          this.reconnectAttempts = 0;\n          this.startPingInterval();\n          this.isConnecting = false;\n          resolve(this.connection);\n        };\n        \n        this.connection.onclose = (event) => {\n          console.log(`WebSocket连接已关闭: ${event.code} ${event.reason}`);\n          this.stopPingInterval();\n          this.handleReconnect();\n          \n          // 触发关闭事件\n          this.dispatchEvent('close', event);\n        };\n        \n        this.connection.onerror = (error) => {\n          console.error('WebSocket错误:', error);\n          this.isConnecting = false;\n          reject(error);\n          \n          // 触发错误事件\n          this.dispatchEvent('error', error);\n        };\n        \n        this.connection.onmessage = (event) => {\n          this.handleMessage(event);\n        };\n      } catch (error) {\n        this.isConnecting = false;\n        reject(error);\n      }\n    });\n    \n    return this.connectionPromise;\n  }\n\n  /**\n   * 断开连接\n   */\n  disconnect() {\n    if (this.connection) {\n      this.connection.close();\n      this.connection = null;\n    }\n    \n    this.stopPingInterval();\n    this.clearReconnectTimeout();\n    this.subscriptions.clear();\n    this.isConnecting = false;\n    this.connectionPromise = null;\n  }\n\n  /**\n   * 发送消息\n   * @param {Object} message 消息对象\n   * @returns {Promise} 发送Promise\n   */\n  sendMessage(message) {\n    return this.ensureConnected().then(() => {\n      const messageString = typeof message === 'string' ? \n        message : JSON.stringify(message);\n      \n      this.connection.send(messageString);\n      return true;\n    });\n  }\n\n  /**\n   * 确保已连接\n   * @returns {Promise} 连接Promise\n   */\n  ensureConnected() {\n    if (this.connection && this.connection.readyState === WebSocket.OPEN) {\n      return Promise.resolve(this.connection);\n    }\n    \n    return this.connect(this.token);\n  }\n\n  /**\n   * 处理接收到的消息\n   * @param {MessageEvent} event WebSocket消息事件\n   */\n  handleMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      \n      // 处理不同类型的消息\n      if (data.type === 'ping') {\n        // 响应ping消息\n        this.sendMessage({ type: 'pong' });\n        return;\n      }\n      \n      // 触发消息事件\n      this.dispatchEvent('message', data);\n      \n      // 处理特定类型的消息\n      if (data.type) {\n        this.dispatchEvent(data.type, data);\n      }\n      \n      // 通知订阅者\n      if (data.subscriptionId && this.subscriptions.has(data.subscriptionId)) {\n        const callback = this.subscriptions.get(data.subscriptionId);\n        callback(data);\n      }\n    } catch (error) {\n      console.error('处理消息失败:', error);\n    }\n  }\n\n  /**\n   * 处理重连\n   */\n  handleReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('达到最大重连次数，停止重连');\n      this.dispatchEvent('reconnectFailed');\n      return;\n    }\n    \n    this.reconnectAttempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n    \n    console.log(`尝试重连 #${this.reconnectAttempts}，${delay}ms后...`);\n    this.clearReconnectTimeout();\n    \n    this.reconnectTimeout = setTimeout(() => {\n      console.log(`开始第${this.reconnectAttempts}次重连尝试`);\n      this.connect(this.token).catch(() => {\n        // 重连失败，将由onclose事件触发下一次重连\n      });\n    }, delay);\n  }\n\n  /**\n   * 启动定时ping\n   */\n  startPingInterval() {\n    this.stopPingInterval();\n    this.pingInterval = setInterval(() => {\n      if (this.connection && this.connection.readyState === WebSocket.OPEN) {\n        this.sendMessage({ type: 'ping' }).catch(() => {\n          // 发送ping失败，可能连接已断开\n          this.connection.close();\n        });\n      }\n    }, 30000); // 每30秒发送一次ping\n  }\n\n  /**\n   * 停止定时ping\n   */\n  stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n  }\n\n  /**\n   * 清除重连定时器\n   */\n  clearReconnectTimeout() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n  }\n\n  /**\n   * 订阅特定事件\n   * @param {string} eventType 事件类型\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */\n  addEventListener(eventType, callback) {\n    if (!this.eventListeners.has(eventType)) {\n      this.eventListeners.set(eventType, new Set());\n    }\n    \n    const listeners = this.eventListeners.get(eventType);\n    listeners.add(callback);\n    \n    return {\n      remove: () => {\n        listeners.delete(callback);\n        if (listeners.size === 0) {\n          this.eventListeners.delete(eventType);\n        }\n      }\n    };\n  }\n\n  /**\n   * 触发事件\n   * @param {string} eventType 事件类型\n   * @param {any} data 事件数据\n   */\n  dispatchEvent(eventType, data) {\n    if (this.eventListeners.has(eventType)) {\n      const listeners = this.eventListeners.get(eventType);\n      listeners.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`事件处理器错误 (${eventType}):`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * 订阅会话更新\n   * @param {string} conversationId 会话ID\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */\n  subscribeToConversation(conversationId, callback) {\n    const subscriptionId = `conversation:${conversationId}`;\n    return this.subscribe(subscriptionId, callback);\n  }\n\n  /**\n   * 订阅生成进度\n   * @param {string} generationId 生成ID\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */\n  subscribeToGeneration(generationId, callback) {\n    const subscriptionId = `generation:${generationId}`;\n    return this.subscribe(subscriptionId, callback);\n  }\n\n  /**\n   * 订阅事件\n   * @param {string} subscriptionId 订阅ID\n   * @param {Function} callback 回调函数\n   * @returns {Object} 订阅对象\n   */\n  subscribe(subscriptionId, callback) {\n    this.subscriptions.set(subscriptionId, callback);\n    \n    // 发送订阅消息\n    this.ensureConnected().then(() => {\n      this.sendMessage({\n        type: 'subscribe',\n        subscriptionId\n      });\n    });\n    \n    return {\n      subscriptionId,\n      unsubscribe: () => this.unsubscribe(subscriptionId)\n    };\n  }\n\n  /**\n   * 取消订阅\n   * @param {string} subscriptionId 订阅ID\n   */\n  unsubscribe(subscriptionId) {\n    if (this.subscriptions.has(subscriptionId)) {\n      this.subscriptions.delete(subscriptionId);\n      \n      // 发送取消订阅消息\n      if (this.connection && this.connection.readyState === WebSocket.OPEN) {\n        this.sendMessage({\n          type: 'unsubscribe',\n          subscriptionId\n        }).catch(() => {\n          // 忽略错误\n        });\n      }\n    }\n  }\n}\n\n// 创建全局单例\nconst webSocketService = new WebSocketService();\n\nexport default webSocketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}