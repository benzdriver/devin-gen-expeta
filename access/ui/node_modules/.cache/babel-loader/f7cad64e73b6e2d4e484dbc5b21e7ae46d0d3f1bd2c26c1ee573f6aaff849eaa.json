{"ast":null,"code":"/**\n * @file api.js\n * @description API服务，处理HTTP请求\n * \n * 需求:\n * 1. 更新现有API服务，支持新的会话和生成功能\n * 2. 保留认证相关功能\n * 3. 增加会话管理和消息发送API\n * 4. 支持代码生成和存储相关API\n * \n * 主要服务:\n * - authService: 认证相关API\n * - conversationService: 会话管理API\n * - expectationService: 期望管理API\n * - generationService: 代码生成API\n */\n\nimport axios from 'axios';\n// 导入其他必要依赖\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加认证信息\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 处理401未授权错误\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('authToken');\n    // 如果有路由，可以重定向到登录页\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 处理用户认证相关的API\nexport const authService = {\n  // 用户登录\n  login: credentials => {\n    return api.post('/api/auth/login', credentials);\n  },\n  // 用户注册\n  register: userData => {\n    return api.post('/api/auth/register', userData);\n  },\n  // 获取当前用户信息\n  getCurrentUser: () => {\n    return api.get('/api/auth/me');\n  },\n  // 退出登录\n  logout: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('mockUser');\n    return Promise.resolve();\n  }\n};\n\n// 处理会话相关的API\nexport const conversationService = {\n  // 创建新会话\n  createConversation: () => {\n    return api.post('/api/conversations');\n  },\n  // 获取会话\n  getConversation: id => {\n    return api.get(`/api/conversations/${id}`);\n  },\n  // 发送消息\n  sendMessage: (conversationId, content) => {\n    return api.post(`/api/conversations/${conversationId}/messages`, {\n      content\n    });\n  },\n  // 确认期望\n  confirmExpectation: (conversationId, expectationId) => {\n    return api.post(`/api/conversations/${conversationId}/confirm`, {\n      expectationId\n    });\n  },\n  // 生成代码\n  generateCode: (conversationId, expectationId) => {\n    return api.post(`/api/conversations/${conversationId}/generate`, {\n      expectationId\n    });\n  },\n  // 获取会话列表\n  getConversations: () => {\n    return api.get('/api/conversations');\n  }\n};\n\n// 处理期望相关的API\nexport const expectationService = {\n  // 获取所有期望\n  getExpectations: () => {\n    return api.get('/api/expectations');\n  },\n  // 获取单个期望详情\n  getExpectation: id => {\n    return api.get(`/api/expectations/${id}`);\n  },\n  // 创建新期望\n  createExpectation: data => {\n    return api.post('/api/expectations', data);\n  },\n  // 更新期望\n  updateExpectation: (id, data) => {\n    return api.put(`/api/expectations/${id}`, data);\n  },\n  // 删除期望\n  deleteExpectation: id => {\n    return api.delete(`/api/expectations/${id}`);\n  }\n};\n\n// 处理代码生成相关的API\nexport const generationService = {\n  // 获取生成结果\n  getGeneration: id => {\n    return api.get(`/api/generations/${id}`);\n  },\n  // 获取生成历史\n  getGenerations: () => {\n    return api.get('/api/generations');\n  },\n  // 下载生成的代码\n  downloadGeneration: id => {\n    return api.get(`/api/generations/${id}/download`, {\n      responseType: 'blob'\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authService","login","credentials","post","register","userData","getCurrentUser","get","logout","resolve","conversationService","createConversation","getConversation","id","sendMessage","conversationId","content","confirmExpectation","expectationId","generateCode","getConversations","expectationService","getExpectations","getExpectation","createExpectation","data","updateExpectation","put","deleteExpectation","delete","generationService","getGeneration","getGenerations","downloadGeneration","responseType"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/services/api.js"],"sourcesContent":["/**\n * @file api.js\n * @description API服务，处理HTTP请求\n * \n * 需求:\n * 1. 更新现有API服务，支持新的会话和生成功能\n * 2. 保留认证相关功能\n * 3. 增加会话管理和消息发送API\n * 4. 支持代码生成和存储相关API\n * \n * 主要服务:\n * - authService: 认证相关API\n * - conversationService: 会话管理API\n * - expectationService: 期望管理API\n * - generationService: 代码生成API\n */\n\nimport axios from 'axios';\n// 导入其他必要依赖\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 添加认证信息\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // 处理401未授权错误\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('authToken');\n      // 如果有路由，可以重定向到登录页\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 处理用户认证相关的API\nexport const authService = {\n  // 用户登录\n  login: (credentials) => {\n    return api.post('/api/auth/login', credentials);\n  },\n  \n  // 用户注册\n  register: (userData) => {\n    return api.post('/api/auth/register', userData);\n  },\n  \n  // 获取当前用户信息\n  getCurrentUser: () => {\n    return api.get('/api/auth/me');\n  },\n  \n  // 退出登录\n  logout: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('mockUser');\n    return Promise.resolve();\n  },\n};\n\n// 处理会话相关的API\nexport const conversationService = {\n  // 创建新会话\n  createConversation: () => {\n    return api.post('/api/conversations');\n  },\n  \n  // 获取会话\n  getConversation: (id) => {\n    return api.get(`/api/conversations/${id}`);\n  },\n  \n  // 发送消息\n  sendMessage: (conversationId, content) => {\n    return api.post(`/api/conversations/${conversationId}/messages`, { content });\n  },\n  \n  // 确认期望\n  confirmExpectation: (conversationId, expectationId) => {\n    return api.post(`/api/conversations/${conversationId}/confirm`, { expectationId });\n  },\n  \n  // 生成代码\n  generateCode: (conversationId, expectationId) => {\n    return api.post(`/api/conversations/${conversationId}/generate`, { expectationId });\n  },\n  \n  // 获取会话列表\n  getConversations: () => {\n    return api.get('/api/conversations');\n  },\n};\n\n// 处理期望相关的API\nexport const expectationService = {\n  // 获取所有期望\n  getExpectations: () => {\n    return api.get('/api/expectations');\n  },\n  \n  // 获取单个期望详情\n  getExpectation: (id) => {\n    return api.get(`/api/expectations/${id}`);\n  },\n  \n  // 创建新期望\n  createExpectation: (data) => {\n    return api.post('/api/expectations', data);\n  },\n  \n  // 更新期望\n  updateExpectation: (id, data) => {\n    return api.put(`/api/expectations/${id}`, data);\n  },\n  \n  // 删除期望\n  deleteExpectation: (id) => {\n    return api.delete(`/api/expectations/${id}`);\n  },\n};\n\n// 处理代码生成相关的API\nexport const generationService = {\n  // 获取生成结果\n  getGeneration: (id) => {\n    return api.get(`/api/generations/${id}`);\n  },\n  \n  // 获取生成历史\n  getGenerations: () => {\n    return api.get('/api/generations');\n  },\n  \n  // 下载生成的代码\n  downloadGeneration: (id) => {\n    return api.get(`/api/generations/${id}/download`, {\n      responseType: 'blob'\n    });\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}