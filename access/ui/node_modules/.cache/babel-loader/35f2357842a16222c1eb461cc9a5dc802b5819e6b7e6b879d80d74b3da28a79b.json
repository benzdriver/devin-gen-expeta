{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * @file useConversation.js\n * @description 对话管理的自定义Hook\n * \n * 需求:\n * 1. 封装对话操作逻辑，简化组件代码\n * 2. 管理会话状态和消息\n * 3. 处理消息发送和接收\n * 4. 提供状态更新通知\n * \n * 返回值:\n * - conversation: 当前会话对象\n * - messages: 消息列表\n * - sendMessage: 发送消息的函数\n * - startNewConversation: 开始新会话的函数\n * - loading: 加载状态\n * - error: 错误信息\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { ConversationStates } from '../../shared/states/ConversationStates';\nimport { conversationService } from '../services/api';\n\n/**\n * 对话管理Hook\n * @param {string} conversationId 会话ID\n */\nconst useConversation = conversationId => {\n  _s();\n  const [conversation, setConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n\n  // 加载会话\n  const loadConversation = useCallback(async id => {\n    if (!id) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await conversationService.getConversation(id);\n      setConversation(response.data);\n      setMessages(response.data.messages || []);\n    } catch (err) {\n      setError(err.message || '加载会话失败');\n      console.error('加载会话失败:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 初始化WebSocket连接\n  const initWebSocket = useCallback(id => {\n    // 关闭现有连接\n    if (wsRef.current) {\n      wsRef.current.close();\n    }\n\n    // 模拟WebSocket服务，实际项目中应连接到真实服务\n    const mockWs = {\n      close: () => console.log('关闭WebSocket连接'),\n      onmessage: null,\n      send: data => {\n        console.log('WebSocket发送消息:', data);\n        // 模拟消息回复\n        setTimeout(() => {\n          if (mockWs.onmessage) {\n            const response = {\n              type: 'message',\n              data: JSON.stringify({\n                message: {\n                  id: `msg_${Date.now()}`,\n                  sender: 'system',\n                  content: '这是系统的自动回复',\n                  timestamp: new Date().toISOString()\n                }\n              })\n            };\n            mockWs.onmessage(response);\n          }\n        }, 1000);\n      }\n    };\n    wsRef.current = mockWs;\n    console.log(`WebSocket连接已建立: ${id}`);\n\n    // 设置消息处理函数\n    wsRef.current.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.message) {\n          setMessages(prev => [...prev, data.message]);\n        }\n        if (data.conversation) {\n          setConversation(data.conversation);\n        }\n      } catch (err) {\n        console.error('处理WebSocket消息失败:', err);\n      }\n    };\n    return mockWs;\n  }, []);\n\n  // 会话ID变化时加载会话\n  useEffect(() => {\n    if (conversationId) {\n      loadConversation(conversationId);\n      initWebSocket(conversationId);\n    }\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [conversationId, loadConversation, initWebSocket]);\n\n  // 发送消息\n  const sendMessage = useCallback(async content => {\n    if (!conversationId || !content) {\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // 通过WebSocket发送消息\n      if (wsRef.current) {\n        wsRef.current.send(JSON.stringify({\n          type: 'message',\n          conversationId,\n          content\n        }));\n      }\n\n      // 同时通过API发送以确保可靠性\n      const response = await conversationService.sendMessage(conversationId, content);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '发送消息失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId]);\n\n  // 开始新会话\n  const startNewConversation = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await conversationService.createConversation();\n      setConversation(response.data);\n      setMessages([]);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '创建会话失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 确认期望\n  const confirmExpectation = useCallback(async expectationId => {\n    if (!conversationId || !expectationId) {\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await conversationService.confirmExpectation(conversationId, expectationId);\n\n      // 更新会话状态\n      if (response.data) {\n        setConversation(prev => ({\n          ...prev,\n          state: ConversationStates.EXPECTATION_CONFIRMED,\n          currentExpectation: {\n            ...prev.currentExpectation,\n            status: 'confirmed'\n          }\n        }));\n      }\n      return response.data;\n    } catch (err) {\n      setError(err.message || '确认期望失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId]);\n\n  // 生成代码\n  const generateCode = useCallback(async expectationId => {\n    if (!conversationId || !expectationId) {\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // 更新会话状态\n      setConversation(prev => ({\n        ...prev,\n        state: ConversationStates.GENERATING\n      }));\n      const response = await conversationService.generateCode(conversationId, expectationId);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '生成代码失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId]);\n  return {\n    conversation,\n    messages,\n    sendMessage,\n    startNewConversation,\n    confirmExpectation,\n    generateCode,\n    loading,\n    error\n  };\n};\n_s(useConversation, \"YgnubSFp2Irb5+/yDBMHXy6+uEc=\");\nexport default useConversation;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","ConversationStates","conversationService","useConversation","conversationId","_s","conversation","setConversation","messages","setMessages","loading","setLoading","error","setError","wsRef","loadConversation","id","response","getConversation","data","err","message","console","initWebSocket","current","close","mockWs","log","onmessage","send","setTimeout","type","JSON","stringify","Date","now","sender","content","timestamp","toISOString","event","parse","prev","sendMessage","startNewConversation","createConversation","confirmExpectation","expectationId","state","EXPECTATION_CONFIRMED","currentExpectation","status","generateCode","GENERATING"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/hooks/useConversation.js"],"sourcesContent":["/**\n * @file useConversation.js\n * @description 对话管理的自定义Hook\n * \n * 需求:\n * 1. 封装对话操作逻辑，简化组件代码\n * 2. 管理会话状态和消息\n * 3. 处理消息发送和接收\n * 4. 提供状态更新通知\n * \n * 返回值:\n * - conversation: 当前会话对象\n * - messages: 消息列表\n * - sendMessage: 发送消息的函数\n * - startNewConversation: 开始新会话的函数\n * - loading: 加载状态\n * - error: 错误信息\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { ConversationStates } from '../../shared/states/ConversationStates';\nimport { conversationService } from '../services/api';\n\n/**\n * 对话管理Hook\n * @param {string} conversationId 会话ID\n */\nconst useConversation = (conversationId) => {\n  const [conversation, setConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n\n  // 加载会话\n  const loadConversation = useCallback(async (id) => {\n    if (!id) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await conversationService.getConversation(id);\n      setConversation(response.data);\n      setMessages(response.data.messages || []);\n    } catch (err) {\n      setError(err.message || '加载会话失败');\n      console.error('加载会话失败:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 初始化WebSocket连接\n  const initWebSocket = useCallback((id) => {\n    // 关闭现有连接\n    if (wsRef.current) {\n      wsRef.current.close();\n    }\n    \n    // 模拟WebSocket服务，实际项目中应连接到真实服务\n    const mockWs = {\n      close: () => console.log('关闭WebSocket连接'),\n      onmessage: null,\n      send: (data) => {\n        console.log('WebSocket发送消息:', data);\n        // 模拟消息回复\n        setTimeout(() => {\n          if (mockWs.onmessage) {\n            const response = {\n              type: 'message',\n              data: JSON.stringify({\n                message: {\n                  id: `msg_${Date.now()}`,\n                  sender: 'system',\n                  content: '这是系统的自动回复',\n                  timestamp: new Date().toISOString()\n                }\n              })\n            };\n            mockWs.onmessage(response);\n          }\n        }, 1000);\n      }\n    };\n    \n    wsRef.current = mockWs;\n    console.log(`WebSocket连接已建立: ${id}`);\n    \n    // 设置消息处理函数\n    wsRef.current.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        if (data.message) {\n          setMessages(prev => [...prev, data.message]);\n        }\n        \n        if (data.conversation) {\n          setConversation(data.conversation);\n        }\n      } catch (err) {\n        console.error('处理WebSocket消息失败:', err);\n      }\n    };\n    \n    return mockWs;\n  }, []);\n\n  // 会话ID变化时加载会话\n  useEffect(() => {\n    if (conversationId) {\n      loadConversation(conversationId);\n      initWebSocket(conversationId);\n    }\n    \n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [conversationId, loadConversation, initWebSocket]);\n\n  // 发送消息\n  const sendMessage = useCallback(async (content) => {\n    if (!conversationId || !content) {\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      // 通过WebSocket发送消息\n      if (wsRef.current) {\n        wsRef.current.send(JSON.stringify({\n          type: 'message',\n          conversationId,\n          content\n        }));\n      }\n      \n      // 同时通过API发送以确保可靠性\n      const response = await conversationService.sendMessage(conversationId, content);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '发送消息失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId]);\n\n  // 开始新会话\n  const startNewConversation = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await conversationService.createConversation();\n      setConversation(response.data);\n      setMessages([]);\n      return response.data;\n    } catch (err) {\n      setError(err.message || '创建会话失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 确认期望\n  const confirmExpectation = useCallback(async (expectationId) => {\n    if (!conversationId || !expectationId) {\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await conversationService.confirmExpectation(\n        conversationId, \n        expectationId\n      );\n      \n      // 更新会话状态\n      if (response.data) {\n        setConversation(prev => ({\n          ...prev,\n          state: ConversationStates.EXPECTATION_CONFIRMED,\n          currentExpectation: {\n            ...prev.currentExpectation,\n            status: 'confirmed'\n          }\n        }));\n      }\n      \n      return response.data;\n    } catch (err) {\n      setError(err.message || '确认期望失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId]);\n\n  // 生成代码\n  const generateCode = useCallback(async (expectationId) => {\n    if (!conversationId || !expectationId) {\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      // 更新会话状态\n      setConversation(prev => ({\n        ...prev,\n        state: ConversationStates.GENERATING\n      }));\n      \n      const response = await conversationService.generateCode(\n        conversationId, \n        expectationId\n      );\n      \n      return response.data;\n    } catch (err) {\n      setError(err.message || '生成代码失败');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId]);\n\n  return {\n    conversation,\n    messages,\n    sendMessage,\n    startNewConversation,\n    confirmExpectation,\n    generateCode,\n    loading,\n    error\n  };\n};\n\nexport default useConversation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}