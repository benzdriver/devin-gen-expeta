{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加认证信息\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 处理401未授权错误\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('authToken');\n    // 如果有路由，可以重定向到登录页\n    // window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 处理需求相关的API\nexport const requirementService = {\n  // 处理需求 (全流程)\n  processRequirement: text => {\n    return api.post('/api/process', {\n      text\n    });\n  },\n  // 仅澄清需求\n  clarifyRequirement: text => {\n    return api.post('/api/clarify', {\n      text\n    });\n  },\n  // 获取所有需求\n  getRequirements: () => {\n    return api.get('/api/requirements');\n  }\n};\n\n// 处理期望相关的API\nexport const expectationService = {\n  // 获取所有期望\n  getExpectations: () => {\n    return api.get('/api/expectations');\n  },\n  // 获取单个期望详情\n  getExpectation: id => {\n    return api.get(`/api/expectations/${id}`);\n  },\n  // 创建新期望\n  createExpectation: data => {\n    return api.post('/api/expectations', data);\n  }\n};\n\n// 处理代码生成相关的API\nexport const generationService = {\n  // 根据期望生成代码\n  generateCode: expectationId => {\n    return api.post('/api/generate', {\n      expectation_id: expectationId\n    });\n  },\n  // 获取生成历史\n  getGenerationHistory: () => {\n    return api.get('/api/generations');\n  }\n};\n\n// 处理验证相关的API\nexport const validationService = {\n  // 验证代码是否满足期望\n  validateCode: (generationId, expectationId) => {\n    return api.post('/api/validate', {\n      generation_id: generationId,\n      expectation_id: expectationId\n    });\n  },\n  // 获取验证历史\n  getValidationHistory: () => {\n    return api.get('/api/validations');\n  }\n};\n\n// 处理用户认证相关的API\nexport const authService = {\n  // 用户登录\n  login: credentials => {\n    // For development, if login with REST fails, try GraphQL\n    return api.post('/api/auth/login', credentials).catch(() => {\n      // GraphQL fallback\n      const loginMutation = `\n          mutation Login($email: String!, $password: String!) {\n            login(email: $email, password: $password) {\n              token\n              user {\n                id\n                name\n                email\n              }\n            }\n          }\n        `;\n      return api.post('/graphql', {\n        query: loginMutation,\n        variables: credentials\n      }).then(response => {\n        if (response.data.errors) {\n          throw new Error(response.data.errors[0].message);\n        }\n        return {\n          data: response.data.data.login\n        };\n      });\n    });\n  },\n  // 用户注册\n  register: userData => {\n    // For development, if registration with REST fails, try GraphQL\n    return api.post('/api/auth/register', userData).catch(() => {\n      // GraphQL fallback\n      const registerMutation = `\n          mutation RegisterUser($input: RegisterInput!) {\n            registerUser(input: $input) {\n              success\n              message\n              token\n              user {\n                id\n                name\n                email\n              }\n            }\n          }\n        `;\n      return api.post('/graphql', {\n        query: registerMutation,\n        variables: {\n          input: userData\n        }\n      }).then(response => {\n        if (response.data.errors) {\n          throw new Error(response.data.errors[0].message);\n        }\n        return {\n          data: response.data.data.registerUser\n        };\n      });\n    });\n  },\n  // 获取当前用户信息\n  getCurrentUser: () => {\n    return api.get('/api/auth/me').catch(() => {\n      // GraphQL fallback\n      const userQuery = `\n          query GetCurrentUser {\n            user {\n              id\n              name\n              email\n            }\n          }\n        `;\n      return api.post('/graphql', {\n        query: userQuery\n      }).then(response => {\n        if (response.data.errors) {\n          throw new Error(response.data.errors[0].message);\n        }\n        return {\n          data: response.data.data.user\n        };\n      });\n    });\n  },\n  // 退出登录\n  logout: () => {\n    localStorage.removeItem('authToken');\n    return Promise.resolve();\n  }\n};\n\n// 系统状态相关的API\nexport const systemService = {\n  // 获取系统状态统计\n  getSystemStats: () => {\n    return api.get('/api/stats');\n  },\n  // 获取系统健康状态\n  getSystemHealth: () => {\n    return api.get('/api/health');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","requirementService","processRequirement","text","post","clarifyRequirement","getRequirements","get","expectationService","getExpectations","getExpectation","id","createExpectation","data","generationService","generateCode","expectationId","expectation_id","getGenerationHistory","validationService","validateCode","generationId","generation_id","getValidationHistory","authService","login","credentials","catch","loginMutation","query","variables","then","errors","Error","message","register","userData","registerMutation","input","registerUser","getCurrentUser","userQuery","user","logout","resolve","systemService","getSystemStats","getSystemHealth"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 添加认证信息\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // 处理401未授权错误\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('authToken');\n      // 如果有路由，可以重定向到登录页\n      // window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 处理需求相关的API\nexport const requirementService = {\n  // 处理需求 (全流程)\n  processRequirement: (text) => {\n    return api.post('/api/process', { text });\n  },\n  \n  // 仅澄清需求\n  clarifyRequirement: (text) => {\n    return api.post('/api/clarify', { text });\n  },\n  \n  // 获取所有需求\n  getRequirements: () => {\n    return api.get('/api/requirements');\n  },\n};\n\n// 处理期望相关的API\nexport const expectationService = {\n  // 获取所有期望\n  getExpectations: () => {\n    return api.get('/api/expectations');\n  },\n  \n  // 获取单个期望详情\n  getExpectation: (id) => {\n    return api.get(`/api/expectations/${id}`);\n  },\n  \n  // 创建新期望\n  createExpectation: (data) => {\n    return api.post('/api/expectations', data);\n  },\n};\n\n// 处理代码生成相关的API\nexport const generationService = {\n  // 根据期望生成代码\n  generateCode: (expectationId) => {\n    return api.post('/api/generate', { expectation_id: expectationId });\n  },\n  \n  // 获取生成历史\n  getGenerationHistory: () => {\n    return api.get('/api/generations');\n  },\n};\n\n// 处理验证相关的API\nexport const validationService = {\n  // 验证代码是否满足期望\n  validateCode: (generationId, expectationId) => {\n    return api.post('/api/validate', {\n      generation_id: generationId,\n      expectation_id: expectationId,\n    });\n  },\n  \n  // 获取验证历史\n  getValidationHistory: () => {\n    return api.get('/api/validations');\n  },\n};\n\n// 处理用户认证相关的API\nexport const authService = {\n  // 用户登录\n  login: (credentials) => {\n    // For development, if login with REST fails, try GraphQL\n    return api.post('/api/auth/login', credentials)\n      .catch(() => {\n        // GraphQL fallback\n        const loginMutation = `\n          mutation Login($email: String!, $password: String!) {\n            login(email: $email, password: $password) {\n              token\n              user {\n                id\n                name\n                email\n              }\n            }\n          }\n        `;\n        return api.post('/graphql', {\n          query: loginMutation,\n          variables: credentials\n        }).then(response => {\n          if (response.data.errors) {\n            throw new Error(response.data.errors[0].message);\n          }\n          return { data: response.data.data.login };\n        });\n      });\n  },\n  \n  // 用户注册\n  register: (userData) => {\n    // For development, if registration with REST fails, try GraphQL\n    return api.post('/api/auth/register', userData)\n      .catch(() => {\n        // GraphQL fallback\n        const registerMutation = `\n          mutation RegisterUser($input: RegisterInput!) {\n            registerUser(input: $input) {\n              success\n              message\n              token\n              user {\n                id\n                name\n                email\n              }\n            }\n          }\n        `;\n        return api.post('/graphql', {\n          query: registerMutation,\n          variables: { input: userData }\n        }).then(response => {\n          if (response.data.errors) {\n            throw new Error(response.data.errors[0].message);\n          }\n          return { data: response.data.data.registerUser };\n        });\n      });\n  },\n  \n  // 获取当前用户信息\n  getCurrentUser: () => {\n    return api.get('/api/auth/me')\n      .catch(() => {\n        // GraphQL fallback\n        const userQuery = `\n          query GetCurrentUser {\n            user {\n              id\n              name\n              email\n            }\n          }\n        `;\n        return api.post('/graphql', {\n          query: userQuery\n        }).then(response => {\n          if (response.data.errors) {\n            throw new Error(response.data.errors[0].message);\n          }\n          return { data: response.data.data.user };\n        });\n      });\n  },\n  \n  // 退出登录\n  logout: () => {\n    localStorage.removeItem('authToken');\n    return Promise.resolve();\n  },\n};\n\n// 系统状态相关的API\nexport const systemService = {\n  // 获取系统状态统计\n  getSystemStats: () => {\n    return api.get('/api/stats');\n  },\n  \n  // 获取系统健康状态\n  getSystemHealth: () => {\n    return api.get('/api/health');\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}