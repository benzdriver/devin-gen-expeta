{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import{authService}from'../services/api';// 创建认证上下文\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// 认证Provider组件\nexport const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// 加载时检查登录状态\nuseEffect(()=>{const loadUser=async()=>{try{const token=localStorage.getItem('authToken');if(token){try{// 尝试从API获取用户信息\nconst response=await authService.getCurrentUser();setCurrentUser(response.data);}catch(apiErr){// 如果API调用失败，尝试从localStorage读取模拟用户\nconst mockUserStr=localStorage.getItem('mockUser');if(mockUserStr){try{const mockUser=JSON.parse(mockUserStr);setCurrentUser(mockUser);}catch(parseErr){// 解析失败，清除localStorage\nlocalStorage.removeItem('authToken');localStorage.removeItem('mockUser');}}else{// 如果没有模拟用户数据，清除authToken\nlocalStorage.removeItem('authToken');}}}}catch(err){console.error('Failed to load user:',err);localStorage.removeItem('authToken');localStorage.removeItem('mockUser');}finally{setLoading(false);}};loadUser();},[]);// 登录\nconst login=async credentials=>{setError(null);try{const response=await authService.login(credentials);const{token,user}=response.data;// 保存认证令牌和用户信息\nlocalStorage.setItem('authToken',token);setCurrentUser(user);return user;}catch(err){var _err$response,_err$response$data;setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'Login failed');throw err;}};// 注册\nconst register=async userData=>{setError(null);try{const response=await authService.register(userData);const{token,user}=response.data;// 保存认证令牌和用户信息\nlocalStorage.setItem('authToken',token);setCurrentUser(user);return user;}catch(err){var _err$response2,_err$response2$data;setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Registration failed');throw err;}};// 退出登录\nconst logout=async()=>{try{await authService.logout();}finally{// 无论API调用是否成功，都清除本地数据\nlocalStorage.removeItem('authToken');localStorage.removeItem('mockUser');setCurrentUser(null);}};// 提供的上下文值\nconst value={currentUser,setCurrentUser,loading,error,login,register,logout,isAuthenticated:!!currentUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// 自定义hook，方便获取认证上下文\nexport const useAuth=()=>{return useContext(AuthContext);};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","authService","jsx","_jsx","AuthContext","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","loadUser","token","localStorage","getItem","response","getCurrentUser","data","apiErr","mockUserStr","mockUser","JSON","parse","parseErr","removeItem","err","console","login","credentials","user","setItem","_err$response","_err$response$data","message","register","userData","_err$response2","_err$response2$data","logout","value","isAuthenticated","Provider","useAuth"],"sources":["/Users/ziyanzhou/Projects/devin-gen-expeta/access/ui/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { authService } from '../services/api';\n\n// 创建认证上下文\nconst AuthContext = createContext();\n\n// 认证Provider组件\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 加载时检查登录状态\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          try {\n            // 尝试从API获取用户信息\n            const response = await authService.getCurrentUser();\n            setCurrentUser(response.data);\n          } catch (apiErr) {\n            // 如果API调用失败，尝试从localStorage读取模拟用户\n            const mockUserStr = localStorage.getItem('mockUser');\n            if (mockUserStr) {\n              try {\n                const mockUser = JSON.parse(mockUserStr);\n                setCurrentUser(mockUser);\n              } catch (parseErr) {\n                // 解析失败，清除localStorage\n                localStorage.removeItem('authToken');\n                localStorage.removeItem('mockUser');\n              }\n            } else {\n              // 如果没有模拟用户数据，清除authToken\n              localStorage.removeItem('authToken');\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Failed to load user:', err);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('mockUser');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  // 登录\n  const login = async (credentials) => {\n    setError(null);\n    try {\n      const response = await authService.login(credentials);\n      const { token, user } = response.data;\n      \n      // 保存认证令牌和用户信息\n      localStorage.setItem('authToken', token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Login failed');\n      throw err;\n    }\n  };\n\n  // 注册\n  const register = async (userData) => {\n    setError(null);\n    try {\n      const response = await authService.register(userData);\n      const { token, user } = response.data;\n      \n      // 保存认证令牌和用户信息\n      localStorage.setItem('authToken', token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Registration failed');\n      throw err;\n    }\n  };\n\n  // 退出登录\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } finally {\n      // 无论API调用是否成功，都清除本地数据\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('mockUser');\n      setCurrentUser(null);\n    }\n  };\n\n  // 提供的上下文值\n  const value = {\n    currentUser,\n    setCurrentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!currentUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// 自定义hook，方便获取认证上下文\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}